//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using NHibernate Fluent Mapping template.
// Code is generated on: 18/07/2012 07:55:53
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using FluentNHibernate.Mapping;
using FluentNHibernate.MappingModel.Collections;

namespace AdventureWorksLT2008Model
{
    public class ProductMap : ClassMap<Product>
    {
        public ProductMap()
        {
              Schema("SalesLT");
              Table("Product");
              LazyLoad();
              Id(x => x.ProductID)
                .Column("ProductID")
                .CustomType("Int32")
                .Access.Property()
                .CustomSqlType("int")
                .Not.Nullable()
                .Precision(10)                
                .GeneratedBy.Identity();
              Map(x => x.Name)    
                .Column("Name")
                .CustomType("String")
                .Access.Property()
                .Generated.Never()
                .CustomSqlType("nvarchar")
                .Not.Nullable()
                .Length(50)
                .Unique();
              Map(x => x.ProductNumber)    
                .Column("ProductNumber")
                .CustomType("String")
                .Access.Property()
                .Generated.Never()
                .CustomSqlType("nvarchar")
                .Not.Nullable()
                .Length(25)
                .Unique();
              Map(x => x.Color)    
                .Column("Color")
                .CustomType("String")
                .Access.Property()
                .Generated.Never()
                .CustomSqlType("nvarchar")
                .Length(15);
              Map(x => x.StandardCost)    
                .Column("StandardCost")
                .CustomType("Decimal")
                .Access.Property()
                .Generated.Never()
                .CustomSqlType("money")
                .Not.Nullable()
                .Precision(19)
                .Scale(4);
              Map(x => x.ListPrice)    
                .Column("ListPrice")
                .CustomType("Decimal")
                .Access.Property()
                .Generated.Never()
                .CustomSqlType("money")
                .Not.Nullable()
                .Precision(19)
                .Scale(4);
              Map(x => x.Size)    
                .Column("Size")
                .CustomType("String")
                .Access.Property()
                .Generated.Never()
                .CustomSqlType("nvarchar")
                .Length(5);
              Map(x => x.Weight)    
                .Column("Weight")
                .CustomType("Decimal")
                .Access.Property()
                .Generated.Never()
                .CustomSqlType("decimal")
                .Precision(8)
                .Scale(2);
              Map(x => x.SellStartDate)    
                .Column("SellStartDate")
                .CustomType("DateTime")
                .Access.Property()
                .Generated.Never()
                .CustomSqlType("datetime")
                .Not.Nullable();
              Map(x => x.SellEndDate)    
                .Column("SellEndDate")
                .CustomType("DateTime")
                .Access.Property()
                .Generated.Never()
                .CustomSqlType("datetime");
              Map(x => x.DiscontinuedDate)    
                .Column("DiscontinuedDate")
                .CustomType("DateTime")
                .Access.Property()
                .Generated.Never()
                .CustomSqlType("datetime");
              Map(x => x.ThumbNailPhoto)    
                .Column("ThumbNailPhoto")
                .CustomType("Binary")
                .Access.Property()
                .Generated.Never()
                .CustomSqlType("varbinary");
              Map(x => x.ThumbnailPhotoFileName)    
                .Column("ThumbnailPhotoFileName")
                .CustomType("String")
                .Access.Property()
                .Generated.Never()
                .CustomSqlType("nvarchar")
                .Length(50);
              Map(x => x.Rowguid)    
                .Column("rowguid")
                .CustomType("Guid")
                .Access.Property()
                .Generated.Never()
                .Default("newid()")
                .CustomSqlType("uniqueidentifier")
                .Not.Nullable()
                .Unique();
              Map(x => x.ModifiedDate)    
                .Column("ModifiedDate")
                .CustomType("DateTime")
                .Access.Property()
                .Generated.Never()
                .Default("getdate()")
                .CustomSqlType("datetime")
                .Not.Nullable();
              References(x => x.ProductModel)
                .Class<ProductModel>()
                .Access.Property()
                .Cascade.None()
                .LazyLoad()
                .Columns("ProductModelID");
              References(x => x.ProductCategory)
                .Class<ProductCategory>()
                .Access.Property()
                .Cascade.None()
                .LazyLoad()
                .Columns("ProductCategoryID");
              HasMany<SalesOrderDetail>(x => x.SalesOrderDetails)
                .Access.Property()
                .AsSet()
                .Cascade.None()
                .LazyLoad()
                // .OptimisticLock.Version() /*bug (or missing feature) in Fluent NHibernate*/
                .Inverse()
                .Not.Generic()
                .KeyColumns.Add("ProductID", mapping => mapping.Name("ProductID")
                                                                     .SqlType("int")
                                                                     .Not.Nullable());
        }
    }

}
